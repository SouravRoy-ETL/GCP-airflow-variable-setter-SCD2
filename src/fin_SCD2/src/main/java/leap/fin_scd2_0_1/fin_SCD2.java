// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package leap.fin_scd2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: fin_SCD2 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class fin_SCD2 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(strLoadingStrategy != null){
				
					this.setProperty("strLoadingStrategy", strLoadingStrategy.toString());
				
			}
			
		}

public String strLoadingStrategy;
public String getStrLoadingStrategy(){
	return this.strLoadingStrategy;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "fin_SCD2";
	private final String projectName = "LEAP";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				fin_SCD2.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(fin_SCD2.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tNormalize_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0Struct> {
    final static byte[] commonByteArrayLock_LEAP_fin_SCD2 = new byte[0];
    static byte[] commonByteArray_LEAP_fin_SCD2 = new byte[0];

	
			    public String TARGET_TABLE_NAME;

				public String getTARGET_TABLE_NAME () {
					return this.TARGET_TABLE_NAME;
				}
				
			    public String NULL_ID;

				public String getNULL_ID () {
					return this.NULL_ID;
				}
				
			    public String MERGE_CONDITION;

				public String getMERGE_CONDITION () {
					return this.MERGE_CONDITION;
				}
				
			    public String ID;

				public String getID () {
					return this.ID;
				}
				
			    public String JOIN_CONDITION;

				public String getJOIN_CONDITION () {
					return this.JOIN_CONDITION;
				}
				
			    public Integer COUNT;

				public Integer getCOUNT () {
					return this.COUNT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LEAP_fin_SCD2.length) {
				if(length < 1024 && commonByteArray_LEAP_fin_SCD2.length == 0) {
   					commonByteArray_LEAP_fin_SCD2 = new byte[1024];
				} else {
   					commonByteArray_LEAP_fin_SCD2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LEAP_fin_SCD2, 0, length);
			strReturn = new String(commonByteArray_LEAP_fin_SCD2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LEAP_fin_SCD2) {

        	try {

        		int length = 0;
		
					this.TARGET_TABLE_NAME = readString(dis);
					
					this.NULL_ID = readString(dis);
					
					this.MERGE_CONDITION = readString(dis);
					
					this.ID = readString(dis);
					
					this.JOIN_CONDITION = readString(dis);
					
						this.COUNT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TARGET_TABLE_NAME,dos);
					
					// String
				
						writeString(this.NULL_ID,dos);
					
					// String
				
						writeString(this.MERGE_CONDITION,dos);
					
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.JOIN_CONDITION,dos);
					
					// Integer
				
						writeInteger(this.COUNT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TARGET_TABLE_NAME="+TARGET_TABLE_NAME);
		sb.append(",NULL_ID="+NULL_ID);
		sb.append(",MERGE_CONDITION="+MERGE_CONDITION);
		sb.append(",ID="+ID);
		sb.append(",JOIN_CONDITION="+JOIN_CONDITION);
		sb.append(",COUNT="+String.valueOf(COUNT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row83Struct implements routines.system.IPersistableRow<row83Struct> {
    final static byte[] commonByteArrayLock_LEAP_fin_SCD2 = new byte[0];
    static byte[] commonByteArray_LEAP_fin_SCD2 = new byte[0];

	
			    public String Owner;

				public String getOwner () {
					return this.Owner;
				}
				
			    public String TableName;

				public String getTableName () {
					return this.TableName;
				}
				
			    public String SCD2__By_Adam;

				public String getSCD2__By_Adam () {
					return this.SCD2__By_Adam;
				}
				
			    public String NR_OF_COLUMN_ON_PREPROD;

				public String getNR_OF_COLUMN_ON_PREPROD () {
					return this.NR_OF_COLUMN_ON_PREPROD;
				}
				
			    public String PrimaryKey_Column;

				public String getPrimaryKey_Column () {
					return this.PrimaryKey_Column;
				}
				
			    public String Primary_Key;

				public String getPrimary_Key () {
					return this.Primary_Key;
				}
				
			    public String Data_Availabilty_in_Database_UAT_;

				public String getData_Availabilty_in_Database_UAT_ () {
					return this.Data_Availabilty_in_Database_UAT_;
				}
				
			    public String Incremental_Identifie;

				public String getIncremental_Identifie () {
					return this.Incremental_Identifie;
				}
				
			    public String Extraction_Mechanism;

				public String getExtraction_Mechanism () {
					return this.Extraction_Mechanism;
				}
				
			    public String Insert_Mechanism;

				public String getInsert_Mechanism () {
					return this.Insert_Mechanism;
				}
				
			    public String HistoricalData_Identification;

				public String getHistoricalData_Identification () {
					return this.HistoricalData_Identification;
				}
				
			    public String Merge_Key;

				public String getMerge_Key () {
					return this.Merge_Key;
				}
				
			    public String Comments;

				public String getComments () {
					return this.Comments;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LEAP_fin_SCD2.length) {
				if(length < 1024 && commonByteArray_LEAP_fin_SCD2.length == 0) {
   					commonByteArray_LEAP_fin_SCD2 = new byte[1024];
				} else {
   					commonByteArray_LEAP_fin_SCD2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LEAP_fin_SCD2, 0, length);
			strReturn = new String(commonByteArray_LEAP_fin_SCD2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LEAP_fin_SCD2) {

        	try {

        		int length = 0;
		
					this.Owner = readString(dis);
					
					this.TableName = readString(dis);
					
					this.SCD2__By_Adam = readString(dis);
					
					this.NR_OF_COLUMN_ON_PREPROD = readString(dis);
					
					this.PrimaryKey_Column = readString(dis);
					
					this.Primary_Key = readString(dis);
					
					this.Data_Availabilty_in_Database_UAT_ = readString(dis);
					
					this.Incremental_Identifie = readString(dis);
					
					this.Extraction_Mechanism = readString(dis);
					
					this.Insert_Mechanism = readString(dis);
					
					this.HistoricalData_Identification = readString(dis);
					
					this.Merge_Key = readString(dis);
					
					this.Comments = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Owner,dos);
					
					// String
				
						writeString(this.TableName,dos);
					
					// String
				
						writeString(this.SCD2__By_Adam,dos);
					
					// String
				
						writeString(this.NR_OF_COLUMN_ON_PREPROD,dos);
					
					// String
				
						writeString(this.PrimaryKey_Column,dos);
					
					// String
				
						writeString(this.Primary_Key,dos);
					
					// String
				
						writeString(this.Data_Availabilty_in_Database_UAT_,dos);
					
					// String
				
						writeString(this.Incremental_Identifie,dos);
					
					// String
				
						writeString(this.Extraction_Mechanism,dos);
					
					// String
				
						writeString(this.Insert_Mechanism,dos);
					
					// String
				
						writeString(this.HistoricalData_Identification,dos);
					
					// String
				
						writeString(this.Merge_Key,dos);
					
					// String
				
						writeString(this.Comments,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Owner="+Owner);
		sb.append(",TableName="+TableName);
		sb.append(",SCD2__By_Adam="+SCD2__By_Adam);
		sb.append(",NR_OF_COLUMN_ON_PREPROD="+NR_OF_COLUMN_ON_PREPROD);
		sb.append(",PrimaryKey_Column="+PrimaryKey_Column);
		sb.append(",Primary_Key="+Primary_Key);
		sb.append(",Data_Availabilty_in_Database_UAT_="+Data_Availabilty_in_Database_UAT_);
		sb.append(",Incremental_Identifie="+Incremental_Identifie);
		sb.append(",Extraction_Mechanism="+Extraction_Mechanism);
		sb.append(",Insert_Mechanism="+Insert_Mechanism);
		sb.append(",HistoricalData_Identification="+HistoricalData_Identification);
		sb.append(",Merge_Key="+Merge_Key);
		sb.append(",Comments="+Comments);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row83Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_2Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
    final static byte[] commonByteArrayLock_LEAP_fin_SCD2 = new byte[0];
    static byte[] commonByteArray_LEAP_fin_SCD2 = new byte[0];

	
			    public String Owner;

				public String getOwner () {
					return this.Owner;
				}
				
			    public String TableName;

				public String getTableName () {
					return this.TableName;
				}
				
			    public String SCD2__By_Adam;

				public String getSCD2__By_Adam () {
					return this.SCD2__By_Adam;
				}
				
			    public String NR_OF_COLUMN_ON_PREPROD;

				public String getNR_OF_COLUMN_ON_PREPROD () {
					return this.NR_OF_COLUMN_ON_PREPROD;
				}
				
			    public String PrimaryKey_Column;

				public String getPrimaryKey_Column () {
					return this.PrimaryKey_Column;
				}
				
			    public String Primary_Key;

				public String getPrimary_Key () {
					return this.Primary_Key;
				}
				
			    public String Data_Availabilty_in_Database_UAT_;

				public String getData_Availabilty_in_Database_UAT_ () {
					return this.Data_Availabilty_in_Database_UAT_;
				}
				
			    public String Incremental_Identifie;

				public String getIncremental_Identifie () {
					return this.Incremental_Identifie;
				}
				
			    public String Extraction_Mechanism;

				public String getExtraction_Mechanism () {
					return this.Extraction_Mechanism;
				}
				
			    public String Insert_Mechanism;

				public String getInsert_Mechanism () {
					return this.Insert_Mechanism;
				}
				
			    public String HistoricalData_Identification;

				public String getHistoricalData_Identification () {
					return this.HistoricalData_Identification;
				}
				
			    public String Merge_Key;

				public String getMerge_Key () {
					return this.Merge_Key;
				}
				
			    public String Comments;

				public String getComments () {
					return this.Comments;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LEAP_fin_SCD2.length) {
				if(length < 1024 && commonByteArray_LEAP_fin_SCD2.length == 0) {
   					commonByteArray_LEAP_fin_SCD2 = new byte[1024];
				} else {
   					commonByteArray_LEAP_fin_SCD2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LEAP_fin_SCD2, 0, length);
			strReturn = new String(commonByteArray_LEAP_fin_SCD2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LEAP_fin_SCD2) {

        	try {

        		int length = 0;
		
					this.Owner = readString(dis);
					
					this.TableName = readString(dis);
					
					this.SCD2__By_Adam = readString(dis);
					
					this.NR_OF_COLUMN_ON_PREPROD = readString(dis);
					
					this.PrimaryKey_Column = readString(dis);
					
					this.Primary_Key = readString(dis);
					
					this.Data_Availabilty_in_Database_UAT_ = readString(dis);
					
					this.Incremental_Identifie = readString(dis);
					
					this.Extraction_Mechanism = readString(dis);
					
					this.Insert_Mechanism = readString(dis);
					
					this.HistoricalData_Identification = readString(dis);
					
					this.Merge_Key = readString(dis);
					
					this.Comments = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Owner,dos);
					
					// String
				
						writeString(this.TableName,dos);
					
					// String
				
						writeString(this.SCD2__By_Adam,dos);
					
					// String
				
						writeString(this.NR_OF_COLUMN_ON_PREPROD,dos);
					
					// String
				
						writeString(this.PrimaryKey_Column,dos);
					
					// String
				
						writeString(this.Primary_Key,dos);
					
					// String
				
						writeString(this.Data_Availabilty_in_Database_UAT_,dos);
					
					// String
				
						writeString(this.Incremental_Identifie,dos);
					
					// String
				
						writeString(this.Extraction_Mechanism,dos);
					
					// String
				
						writeString(this.Insert_Mechanism,dos);
					
					// String
				
						writeString(this.HistoricalData_Identification,dos);
					
					// String
				
						writeString(this.Merge_Key,dos);
					
					// String
				
						writeString(this.Comments,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Owner="+Owner);
		sb.append(",TableName="+TableName);
		sb.append(",SCD2__By_Adam="+SCD2__By_Adam);
		sb.append(",NR_OF_COLUMN_ON_PREPROD="+NR_OF_COLUMN_ON_PREPROD);
		sb.append(",PrimaryKey_Column="+PrimaryKey_Column);
		sb.append(",Primary_Key="+Primary_Key);
		sb.append(",Data_Availabilty_in_Database_UAT_="+Data_Availabilty_in_Database_UAT_);
		sb.append(",Incremental_Identifie="+Incremental_Identifie);
		sb.append(",Extraction_Mechanism="+Extraction_Mechanism);
		sb.append(",Insert_Mechanism="+Insert_Mechanism);
		sb.append(",HistoricalData_Identification="+HistoricalData_Identification);
		sb.append(",Merge_Key="+Merge_Key);
		sb.append(",Comments="+Comments);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_1Process(globalMap);

		row83Struct row83 = new row83Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0Struct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Users/Sourav Roy/Desktop/Workspace/YAML-SCD2/input/talend/Loading_Strategy_D2S3_NC.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */"|"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"UTF-8"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("TARGET_TABLE_NAME");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("NULL_ID");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("MERGE_CONDITION");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ID");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("JOIN_CONDITION");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("COUNT");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row83");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct> tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct>) 
					globalMap.get( "tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0" ))
					;					
					
	

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0HashKey = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Default = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */context.strLoadingStrategy/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
						String[] rowtFileInputDelimited_2=null;
						int currentLinetFileInputDelimited_2 = 0;
	        			int outputLinetFileInputDelimited_2 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0;
			if(footer_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"UTF-8")), fieldSeparator_tFileInputDelimited_2[0]);
		        			}
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('\"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"UTF-8")), fieldSeparator_tFileInputDelimited_2[0]);
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('\"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < 1;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row83 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row83 = new row83Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row83.Owner = null;
					
							row83.TableName = null;
					
							row83.SCD2__By_Adam = null;
					
							row83.NR_OF_COLUMN_ON_PREPROD = null;
					
							row83.PrimaryKey_Column = null;
					
							row83.Primary_Key = null;
					
							row83.Data_Availabilty_in_Database_UAT_ = null;
					
							row83.Incremental_Identifie = null;
					
							row83.Extraction_Mechanism = null;
					
							row83.Insert_Mechanism = null;
					
							row83.HistoricalData_Identification = null;
					
							row83.Merge_Key = null;
					
							row83.Comments = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.Owner = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.Owner = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.TableName = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.TableName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.SCD2__By_Adam = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.SCD2__By_Adam = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.NR_OF_COLUMN_ON_PREPROD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.NR_OF_COLUMN_ON_PREPROD = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.PrimaryKey_Column = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.PrimaryKey_Column = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.Primary_Key = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.Primary_Key = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.Data_Availabilty_in_Database_UAT_ = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.Data_Availabilty_in_Database_UAT_ = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.Incremental_Identifie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.Incremental_Identifie = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.Extraction_Mechanism = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.Extraction_Mechanism = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.Insert_Mechanism = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.Insert_Mechanism = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.HistoricalData_Identification = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.HistoricalData_Identification = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.Merge_Key = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.Merge_Key = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row83.Comments = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row83.Comments = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_2 = true;
        							
                							System.err.println(e.getMessage());
                							row83 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row83"
if(row83 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row83");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = false;
       		  	    	
       		  	    	
 							copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0HashKey.TARGET_TABLE_NAME = row83.TableName ;
                        		    		

								
		                        	copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.lookup( copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
	
		  								forceLoopcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = true;
			           		  	} // G 21
                    		  	
                    		

							copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = null;
                    		  	 
							

								while ((tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 != null && tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.hasNext()) || forceLoopcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0) { // G_TM_M_043

								
									 // CALL close loop of lookup 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0'
									
                    		  	 
							   
                    		  	 
	       		  	    	copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct fromLookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = null;
							copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Default;
										 
							
								
								if(!forceLoopcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0) { // G 46
								
							
								 
							
								
								fromLookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.next();

							

							if(fromLookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 != null) {
								copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = fromLookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0 = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0_tmp.TARGET_TABLE_NAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.TARGET_TABLE_NAME ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0_tmp.NULL_ID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.NULL_ID ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0_tmp.MERGE_CONDITION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.MERGE_CONDITION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0_tmp.ID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.ID ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0_tmp.JOIN_CONDITION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.JOIN_CONDITION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0_tmp.COUNT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.COUNT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0.TARGET_TABLE_NAME != null) {
                        sb_tFileOutputDelimited_1.append(
                            copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0.TARGET_TABLE_NAME
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0.NULL_ID != null) {
                        sb_tFileOutputDelimited_1.append(
                            copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0.NULL_ID
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0.MERGE_CONDITION != null) {
                        sb_tFileOutputDelimited_1.append(
                            copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0.MERGE_CONDITION
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0.ID != null) {
                        sb_tFileOutputDelimited_1.append(
                            copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0.ID
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0.JOIN_CONDITION != null) {
                        sb_tFileOutputDelimited_1.append(
                            copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0.JOIN_CONDITION
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0.COUNT != null) {
                        sb_tFileOutputDelimited_1.append(
                            copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0.COUNT
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0"



	
		} // close loop of lookup 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row83"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 != null) {
						tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.endGet();
					}
					globalMap.remove( "tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row83");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct implements routines.system.IPersistableComparableLookupRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct> {
    final static byte[] commonByteArrayLock_LEAP_fin_SCD2 = new byte[0];
    static byte[] commonByteArray_LEAP_fin_SCD2 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String TARGET_TABLE_NAME;

				public String getTARGET_TABLE_NAME () {
					return this.TARGET_TABLE_NAME;
				}
				
			    public String NULL_ID;

				public String getNULL_ID () {
					return this.NULL_ID;
				}
				
			    public String MERGE_CONDITION;

				public String getMERGE_CONDITION () {
					return this.MERGE_CONDITION;
				}
				
			    public String ID;

				public String getID () {
					return this.ID;
				}
				
			    public String JOIN_CONDITION;

				public String getJOIN_CONDITION () {
					return this.JOIN_CONDITION;
				}
				
			    public Integer COUNT;

				public Integer getCOUNT () {
					return this.COUNT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.TARGET_TABLE_NAME == null) ? 0 : this.TARGET_TABLE_NAME.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct other = (copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct) obj;
		
						if (this.TARGET_TABLE_NAME == null) {
							if (other.TARGET_TABLE_NAME != null)
								return false;
						
						} else if (!this.TARGET_TABLE_NAME.equals(other.TARGET_TABLE_NAME))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct other) {

		other.TARGET_TABLE_NAME = this.TARGET_TABLE_NAME;
	            other.NULL_ID = this.NULL_ID;
	            other.MERGE_CONDITION = this.MERGE_CONDITION;
	            other.ID = this.ID;
	            other.JOIN_CONDITION = this.JOIN_CONDITION;
	            other.COUNT = this.COUNT;
	            
	}

	public void copyKeysDataTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct other) {

		other.TARGET_TABLE_NAME = this.TARGET_TABLE_NAME;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LEAP_fin_SCD2.length) {
				if(length < 1024 && commonByteArray_LEAP_fin_SCD2.length == 0) {
   					commonByteArray_LEAP_fin_SCD2 = new byte[1024];
				} else {
   					commonByteArray_LEAP_fin_SCD2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LEAP_fin_SCD2, 0, length);
			strReturn = new String(commonByteArray_LEAP_fin_SCD2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LEAP_fin_SCD2) {

        	try {

        		int length = 0;
		
					this.TARGET_TABLE_NAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TARGET_TABLE_NAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NULL_ID = readString(dis,ois);
					
						this.MERGE_CONDITION = readString(dis,ois);
					
						this.ID = readString(dis,ois);
					
						this.JOIN_CONDITION = readString(dis,ois);
					
						this.COUNT = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NULL_ID, dos, oos);
					
						writeString(this.MERGE_CONDITION, dos, oos);
					
						writeString(this.ID, dos, oos);
					
						writeString(this.JOIN_CONDITION, dos, oos);
					
					writeInteger(this.COUNT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TARGET_TABLE_NAME="+TARGET_TABLE_NAME);
		sb.append(",NULL_ID="+NULL_ID);
		sb.append(",MERGE_CONDITION="+MERGE_CONDITION);
		sb.append(",ID="+ID);
		sb.append(",JOIN_CONDITION="+JOIN_CONDITION);
		sb.append(",COUNT="+String.valueOf(COUNT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.TARGET_TABLE_NAME, other.TARGET_TABLE_NAME);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row84Struct implements routines.system.IPersistableRow<row84Struct> {
    final static byte[] commonByteArrayLock_LEAP_fin_SCD2 = new byte[0];
    static byte[] commonByteArray_LEAP_fin_SCD2 = new byte[0];

	
			    public String TARGET_TABLE_NAME;

				public String getTARGET_TABLE_NAME () {
					return this.TARGET_TABLE_NAME;
				}
				
			    public String JOIN_CONDITION;

				public String getJOIN_CONDITION () {
					return this.JOIN_CONDITION;
				}
				
			    public String ID;

				public String getID () {
					return this.ID;
				}
				
			    public String MERGE_KEY;

				public String getMERGE_KEY () {
					return this.MERGE_KEY;
				}
				
			    public String NULL_ID;

				public String getNULL_ID () {
					return this.NULL_ID;
				}
				
			    public Integer COUNT;

				public Integer getCOUNT () {
					return this.COUNT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LEAP_fin_SCD2.length) {
				if(length < 1024 && commonByteArray_LEAP_fin_SCD2.length == 0) {
   					commonByteArray_LEAP_fin_SCD2 = new byte[1024];
				} else {
   					commonByteArray_LEAP_fin_SCD2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LEAP_fin_SCD2, 0, length);
			strReturn = new String(commonByteArray_LEAP_fin_SCD2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LEAP_fin_SCD2) {

        	try {

        		int length = 0;
		
					this.TARGET_TABLE_NAME = readString(dis);
					
					this.JOIN_CONDITION = readString(dis);
					
					this.ID = readString(dis);
					
					this.MERGE_KEY = readString(dis);
					
					this.NULL_ID = readString(dis);
					
						this.COUNT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TARGET_TABLE_NAME,dos);
					
					// String
				
						writeString(this.JOIN_CONDITION,dos);
					
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.MERGE_KEY,dos);
					
					// String
				
						writeString(this.NULL_ID,dos);
					
					// Integer
				
						writeInteger(this.COUNT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TARGET_TABLE_NAME="+TARGET_TABLE_NAME);
		sb.append(",JOIN_CONDITION="+JOIN_CONDITION);
		sb.append(",ID="+ID);
		sb.append(",MERGE_KEY="+MERGE_KEY);
		sb.append(",NULL_ID="+NULL_ID);
		sb.append(",COUNT="+String.valueOf(COUNT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row84Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_LEAP_fin_SCD2 = new byte[0];
    static byte[] commonByteArray_LEAP_fin_SCD2 = new byte[0];

	
			    public String TARGET_TABLE_NAME;

				public String getTARGET_TABLE_NAME () {
					return this.TARGET_TABLE_NAME;
				}
				
			    public String JOIN_CONDITION;

				public String getJOIN_CONDITION () {
					return this.JOIN_CONDITION;
				}
				
			    public String ID;

				public String getID () {
					return this.ID;
				}
				
			    public String MERGE_KEY;

				public String getMERGE_KEY () {
					return this.MERGE_KEY;
				}
				
			    public String NULL_ID;

				public String getNULL_ID () {
					return this.NULL_ID;
				}
				
			    public Integer COUNT;

				public Integer getCOUNT () {
					return this.COUNT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LEAP_fin_SCD2.length) {
				if(length < 1024 && commonByteArray_LEAP_fin_SCD2.length == 0) {
   					commonByteArray_LEAP_fin_SCD2 = new byte[1024];
				} else {
   					commonByteArray_LEAP_fin_SCD2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LEAP_fin_SCD2, 0, length);
			strReturn = new String(commonByteArray_LEAP_fin_SCD2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LEAP_fin_SCD2) {

        	try {

        		int length = 0;
		
					this.TARGET_TABLE_NAME = readString(dis);
					
					this.JOIN_CONDITION = readString(dis);
					
					this.ID = readString(dis);
					
					this.MERGE_KEY = readString(dis);
					
					this.NULL_ID = readString(dis);
					
						this.COUNT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TARGET_TABLE_NAME,dos);
					
					// String
				
						writeString(this.JOIN_CONDITION,dos);
					
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.MERGE_KEY,dos);
					
					// String
				
						writeString(this.NULL_ID,dos);
					
					// Integer
				
						writeInteger(this.COUNT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TARGET_TABLE_NAME="+TARGET_TABLE_NAME);
		sb.append(",JOIN_CONDITION="+JOIN_CONDITION);
		sb.append(",ID="+ID);
		sb.append(",MERGE_KEY="+MERGE_KEY);
		sb.append(",NULL_ID="+NULL_ID);
		sb.append(",COUNT="+String.valueOf(COUNT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0Struct> {
    final static byte[] commonByteArrayLock_LEAP_fin_SCD2 = new byte[0];
    static byte[] commonByteArray_LEAP_fin_SCD2 = new byte[0];

	
			    public String TARGET_TABLE_NAME;

				public String getTARGET_TABLE_NAME () {
					return this.TARGET_TABLE_NAME;
				}
				
			    public String PRIMARY_KEY_COLUMN;

				public String getPRIMARY_KEY_COLUMN () {
					return this.PRIMARY_KEY_COLUMN;
				}
				
			    public String JOIN_CONDITION;

				public String getJOIN_CONDITION () {
					return this.JOIN_CONDITION;
				}
				
			    public String ID;

				public String getID () {
					return this.ID;
				}
				
			    public String MERGE_KEY;

				public String getMERGE_KEY () {
					return this.MERGE_KEY;
				}
				
			    public String NULL_ID;

				public String getNULL_ID () {
					return this.NULL_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LEAP_fin_SCD2.length) {
				if(length < 1024 && commonByteArray_LEAP_fin_SCD2.length == 0) {
   					commonByteArray_LEAP_fin_SCD2 = new byte[1024];
				} else {
   					commonByteArray_LEAP_fin_SCD2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LEAP_fin_SCD2, 0, length);
			strReturn = new String(commonByteArray_LEAP_fin_SCD2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LEAP_fin_SCD2) {

        	try {

        		int length = 0;
		
					this.TARGET_TABLE_NAME = readString(dis);
					
					this.PRIMARY_KEY_COLUMN = readString(dis);
					
					this.JOIN_CONDITION = readString(dis);
					
					this.ID = readString(dis);
					
					this.MERGE_KEY = readString(dis);
					
					this.NULL_ID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TARGET_TABLE_NAME,dos);
					
					// String
				
						writeString(this.PRIMARY_KEY_COLUMN,dos);
					
					// String
				
						writeString(this.JOIN_CONDITION,dos);
					
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.MERGE_KEY,dos);
					
					// String
				
						writeString(this.NULL_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TARGET_TABLE_NAME="+TARGET_TABLE_NAME);
		sb.append(",PRIMARY_KEY_COLUMN="+PRIMARY_KEY_COLUMN);
		sb.append(",JOIN_CONDITION="+JOIN_CONDITION);
		sb.append(",ID="+ID);
		sb.append(",MERGE_KEY="+MERGE_KEY);
		sb.append(",NULL_ID="+NULL_ID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row82Struct implements routines.system.IPersistableRow<row82Struct> {
    final static byte[] commonByteArrayLock_LEAP_fin_SCD2 = new byte[0];
    static byte[] commonByteArray_LEAP_fin_SCD2 = new byte[0];

	
			    public String OWNER;

				public String getOWNER () {
					return this.OWNER;
				}
				
			    public String TARGET_TABLE_NAME;

				public String getTARGET_TABLE_NAME () {
					return this.TARGET_TABLE_NAME;
				}
				
			    public String PRIMARY_KEY_COLUMN;

				public String getPRIMARY_KEY_COLUMN () {
					return this.PRIMARY_KEY_COLUMN;
				}
				
			    public String PRIMARY_KEY;

				public String getPRIMARY_KEY () {
					return this.PRIMARY_KEY;
				}
				
			    public String MERGE_KEY;

				public String getMERGE_KEY () {
					return this.MERGE_KEY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LEAP_fin_SCD2.length) {
				if(length < 1024 && commonByteArray_LEAP_fin_SCD2.length == 0) {
   					commonByteArray_LEAP_fin_SCD2 = new byte[1024];
				} else {
   					commonByteArray_LEAP_fin_SCD2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LEAP_fin_SCD2, 0, length);
			strReturn = new String(commonByteArray_LEAP_fin_SCD2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LEAP_fin_SCD2) {

        	try {

        		int length = 0;
		
					this.OWNER = readString(dis);
					
					this.TARGET_TABLE_NAME = readString(dis);
					
					this.PRIMARY_KEY_COLUMN = readString(dis);
					
					this.PRIMARY_KEY = readString(dis);
					
					this.MERGE_KEY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OWNER,dos);
					
					// String
				
						writeString(this.TARGET_TABLE_NAME,dos);
					
					// String
				
						writeString(this.PRIMARY_KEY_COLUMN,dos);
					
					// String
				
						writeString(this.PRIMARY_KEY,dos);
					
					// String
				
						writeString(this.MERGE_KEY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OWNER="+OWNER);
		sb.append(",TARGET_TABLE_NAME="+TARGET_TABLE_NAME);
		sb.append(",PRIMARY_KEY_COLUMN="+PRIMARY_KEY_COLUMN);
		sb.append(",PRIMARY_KEY="+PRIMARY_KEY);
		sb.append(",MERGE_KEY="+MERGE_KEY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row82Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0Struct> {
    final static byte[] commonByteArrayLock_LEAP_fin_SCD2 = new byte[0];
    static byte[] commonByteArray_LEAP_fin_SCD2 = new byte[0];

	
			    public String OWNER;

				public String getOWNER () {
					return this.OWNER;
				}
				
			    public String TARGET_TABLE_NAME;

				public String getTARGET_TABLE_NAME () {
					return this.TARGET_TABLE_NAME;
				}
				
			    public String PRIMARY_KEY_COLUMN;

				public String getPRIMARY_KEY_COLUMN () {
					return this.PRIMARY_KEY_COLUMN;
				}
				
			    public String PRIMARY_KEY;

				public String getPRIMARY_KEY () {
					return this.PRIMARY_KEY;
				}
				
			    public String MERGE_KEY;

				public String getMERGE_KEY () {
					return this.MERGE_KEY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LEAP_fin_SCD2.length) {
				if(length < 1024 && commonByteArray_LEAP_fin_SCD2.length == 0) {
   					commonByteArray_LEAP_fin_SCD2 = new byte[1024];
				} else {
   					commonByteArray_LEAP_fin_SCD2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LEAP_fin_SCD2, 0, length);
			strReturn = new String(commonByteArray_LEAP_fin_SCD2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LEAP_fin_SCD2) {

        	try {

        		int length = 0;
		
					this.OWNER = readString(dis);
					
					this.TARGET_TABLE_NAME = readString(dis);
					
					this.PRIMARY_KEY_COLUMN = readString(dis);
					
					this.PRIMARY_KEY = readString(dis);
					
					this.MERGE_KEY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OWNER,dos);
					
					// String
				
						writeString(this.TARGET_TABLE_NAME,dos);
					
					// String
				
						writeString(this.PRIMARY_KEY_COLUMN,dos);
					
					// String
				
						writeString(this.PRIMARY_KEY,dos);
					
					// String
				
						writeString(this.MERGE_KEY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OWNER="+OWNER);
		sb.append(",TARGET_TABLE_NAME="+TARGET_TABLE_NAME);
		sb.append(",PRIMARY_KEY_COLUMN="+PRIMARY_KEY_COLUMN);
		sb.append(",PRIMARY_KEY="+PRIMARY_KEY);
		sb.append(",MERGE_KEY="+MERGE_KEY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row81Struct implements routines.system.IPersistableRow<row81Struct> {
    final static byte[] commonByteArrayLock_LEAP_fin_SCD2 = new byte[0];
    static byte[] commonByteArray_LEAP_fin_SCD2 = new byte[0];

	
			    public String Owner;

				public String getOwner () {
					return this.Owner;
				}
				
			    public String TableName;

				public String getTableName () {
					return this.TableName;
				}
				
			    public String SCD2__By_Adam;

				public String getSCD2__By_Adam () {
					return this.SCD2__By_Adam;
				}
				
			    public String NR_OF_COLUMN_ON_PREPROD;

				public String getNR_OF_COLUMN_ON_PREPROD () {
					return this.NR_OF_COLUMN_ON_PREPROD;
				}
				
			    public String PrimaryKey_Column;

				public String getPrimaryKey_Column () {
					return this.PrimaryKey_Column;
				}
				
			    public String Primary_Key;

				public String getPrimary_Key () {
					return this.Primary_Key;
				}
				
			    public String Data_Availabilty_in_Database_UAT_;

				public String getData_Availabilty_in_Database_UAT_ () {
					return this.Data_Availabilty_in_Database_UAT_;
				}
				
			    public String Incremental_Identifie;

				public String getIncremental_Identifie () {
					return this.Incremental_Identifie;
				}
				
			    public String Extraction_Mechanism;

				public String getExtraction_Mechanism () {
					return this.Extraction_Mechanism;
				}
				
			    public String Insert_Mechanism;

				public String getInsert_Mechanism () {
					return this.Insert_Mechanism;
				}
				
			    public String HistoricalData_Identification;

				public String getHistoricalData_Identification () {
					return this.HistoricalData_Identification;
				}
				
			    public String Merge_Key;

				public String getMerge_Key () {
					return this.Merge_Key;
				}
				
			    public String Comments;

				public String getComments () {
					return this.Comments;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LEAP_fin_SCD2.length) {
				if(length < 1024 && commonByteArray_LEAP_fin_SCD2.length == 0) {
   					commonByteArray_LEAP_fin_SCD2 = new byte[1024];
				} else {
   					commonByteArray_LEAP_fin_SCD2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LEAP_fin_SCD2, 0, length);
			strReturn = new String(commonByteArray_LEAP_fin_SCD2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LEAP_fin_SCD2) {

        	try {

        		int length = 0;
		
					this.Owner = readString(dis);
					
					this.TableName = readString(dis);
					
					this.SCD2__By_Adam = readString(dis);
					
					this.NR_OF_COLUMN_ON_PREPROD = readString(dis);
					
					this.PrimaryKey_Column = readString(dis);
					
					this.Primary_Key = readString(dis);
					
					this.Data_Availabilty_in_Database_UAT_ = readString(dis);
					
					this.Incremental_Identifie = readString(dis);
					
					this.Extraction_Mechanism = readString(dis);
					
					this.Insert_Mechanism = readString(dis);
					
					this.HistoricalData_Identification = readString(dis);
					
					this.Merge_Key = readString(dis);
					
					this.Comments = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Owner,dos);
					
					// String
				
						writeString(this.TableName,dos);
					
					// String
				
						writeString(this.SCD2__By_Adam,dos);
					
					// String
				
						writeString(this.NR_OF_COLUMN_ON_PREPROD,dos);
					
					// String
				
						writeString(this.PrimaryKey_Column,dos);
					
					// String
				
						writeString(this.Primary_Key,dos);
					
					// String
				
						writeString(this.Data_Availabilty_in_Database_UAT_,dos);
					
					// String
				
						writeString(this.Incremental_Identifie,dos);
					
					// String
				
						writeString(this.Extraction_Mechanism,dos);
					
					// String
				
						writeString(this.Insert_Mechanism,dos);
					
					// String
				
						writeString(this.HistoricalData_Identification,dos);
					
					// String
				
						writeString(this.Merge_Key,dos);
					
					// String
				
						writeString(this.Comments,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Owner="+Owner);
		sb.append(",TableName="+TableName);
		sb.append(",SCD2__By_Adam="+SCD2__By_Adam);
		sb.append(",NR_OF_COLUMN_ON_PREPROD="+NR_OF_COLUMN_ON_PREPROD);
		sb.append(",PrimaryKey_Column="+PrimaryKey_Column);
		sb.append(",Primary_Key="+Primary_Key);
		sb.append(",Data_Availabilty_in_Database_UAT_="+Data_Availabilty_in_Database_UAT_);
		sb.append(",Incremental_Identifie="+Incremental_Identifie);
		sb.append(",Extraction_Mechanism="+Extraction_Mechanism);
		sb.append(",Insert_Mechanism="+Insert_Mechanism);
		sb.append(",HistoricalData_Identification="+HistoricalData_Identification);
		sb.append(",Merge_Key="+Merge_Key);
		sb.append(",Comments="+Comments);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row81Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row80Struct implements routines.system.IPersistableRow<row80Struct> {
    final static byte[] commonByteArrayLock_LEAP_fin_SCD2 = new byte[0];
    static byte[] commonByteArray_LEAP_fin_SCD2 = new byte[0];

	
			    public String Owner;

				public String getOwner () {
					return this.Owner;
				}
				
			    public String TableName;

				public String getTableName () {
					return this.TableName;
				}
				
			    public String SCD2__By_Adam;

				public String getSCD2__By_Adam () {
					return this.SCD2__By_Adam;
				}
				
			    public String NR_OF_COLUMN_ON_PREPROD;

				public String getNR_OF_COLUMN_ON_PREPROD () {
					return this.NR_OF_COLUMN_ON_PREPROD;
				}
				
			    public String PrimaryKey_Column;

				public String getPrimaryKey_Column () {
					return this.PrimaryKey_Column;
				}
				
			    public String Primary_Key;

				public String getPrimary_Key () {
					return this.Primary_Key;
				}
				
			    public String Data_Availabilty_in_Database_UAT_;

				public String getData_Availabilty_in_Database_UAT_ () {
					return this.Data_Availabilty_in_Database_UAT_;
				}
				
			    public String Incremental_Identifie;

				public String getIncremental_Identifie () {
					return this.Incremental_Identifie;
				}
				
			    public String Extraction_Mechanism;

				public String getExtraction_Mechanism () {
					return this.Extraction_Mechanism;
				}
				
			    public String Insert_Mechanism;

				public String getInsert_Mechanism () {
					return this.Insert_Mechanism;
				}
				
			    public String HistoricalData_Identification;

				public String getHistoricalData_Identification () {
					return this.HistoricalData_Identification;
				}
				
			    public String Merge_Key;

				public String getMerge_Key () {
					return this.Merge_Key;
				}
				
			    public String Comments;

				public String getComments () {
					return this.Comments;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LEAP_fin_SCD2.length) {
				if(length < 1024 && commonByteArray_LEAP_fin_SCD2.length == 0) {
   					commonByteArray_LEAP_fin_SCD2 = new byte[1024];
				} else {
   					commonByteArray_LEAP_fin_SCD2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LEAP_fin_SCD2, 0, length);
			strReturn = new String(commonByteArray_LEAP_fin_SCD2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LEAP_fin_SCD2) {

        	try {

        		int length = 0;
		
					this.Owner = readString(dis);
					
					this.TableName = readString(dis);
					
					this.SCD2__By_Adam = readString(dis);
					
					this.NR_OF_COLUMN_ON_PREPROD = readString(dis);
					
					this.PrimaryKey_Column = readString(dis);
					
					this.Primary_Key = readString(dis);
					
					this.Data_Availabilty_in_Database_UAT_ = readString(dis);
					
					this.Incremental_Identifie = readString(dis);
					
					this.Extraction_Mechanism = readString(dis);
					
					this.Insert_Mechanism = readString(dis);
					
					this.HistoricalData_Identification = readString(dis);
					
					this.Merge_Key = readString(dis);
					
					this.Comments = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Owner,dos);
					
					// String
				
						writeString(this.TableName,dos);
					
					// String
				
						writeString(this.SCD2__By_Adam,dos);
					
					// String
				
						writeString(this.NR_OF_COLUMN_ON_PREPROD,dos);
					
					// String
				
						writeString(this.PrimaryKey_Column,dos);
					
					// String
				
						writeString(this.Primary_Key,dos);
					
					// String
				
						writeString(this.Data_Availabilty_in_Database_UAT_,dos);
					
					// String
				
						writeString(this.Incremental_Identifie,dos);
					
					// String
				
						writeString(this.Extraction_Mechanism,dos);
					
					// String
				
						writeString(this.Insert_Mechanism,dos);
					
					// String
				
						writeString(this.HistoricalData_Identification,dos);
					
					// String
				
						writeString(this.Merge_Key,dos);
					
					// String
				
						writeString(this.Comments,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Owner="+Owner);
		sb.append(",TableName="+TableName);
		sb.append(",SCD2__By_Adam="+SCD2__By_Adam);
		sb.append(",NR_OF_COLUMN_ON_PREPROD="+NR_OF_COLUMN_ON_PREPROD);
		sb.append(",PrimaryKey_Column="+PrimaryKey_Column);
		sb.append(",Primary_Key="+Primary_Key);
		sb.append(",Data_Availabilty_in_Database_UAT_="+Data_Availabilty_in_Database_UAT_);
		sb.append(",Incremental_Identifie="+Incremental_Identifie);
		sb.append(",Extraction_Mechanism="+Extraction_Mechanism);
		sb.append(",Insert_Mechanism="+Insert_Mechanism);
		sb.append(",HistoricalData_Identification="+HistoricalData_Identification);
		sb.append(",Merge_Key="+Merge_Key);
		sb.append(",Comments="+Comments);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row80Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row80Struct row80 = new row80Struct();
row81Struct row81 = new row81Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0Struct();
row82Struct row82 = new row82Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0Struct();
row84Struct row84 = new row84Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct();








	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String TARGET_TABLE_NAME;StringBuilder JOIN_CONDITION_list = new StringBuilder();
           			boolean JOIN_CONDITION_list_firstEmpty = false;
           			StringBuilder ID_list = new StringBuilder();
           			boolean ID_list_firstEmpty = false;
           			StringBuilder MERGE_KEY_list = new StringBuilder();
           			boolean MERGE_KEY_list_firstEmpty = false;
           			StringBuilder NULL_ID_list = new StringBuilder();
           			boolean NULL_ID_list_firstEmpty = false;
           			int count = 0;
       			int COUNT_clmCount = 0;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.TARGET_TABLE_NAME == null) ? 0 : this.TARGET_TABLE_NAME.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.TARGET_TABLE_NAME == null) {
								if (other.TARGET_TABLE_NAME != null) 
									return false;
							} else if (!this.TARGET_TABLE_NAME.equals(other.TARGET_TABLE_NAME)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	
	String delimiter_tAggregateRow_1 = ",";
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row82");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String Primary_key_modified;
	String ID_sq;
	String Null;
	String Merge;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tNormalize_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tNormalize_1", false);
		start_Hash.put("tNormalize_1", System.currentTimeMillis());
		
	
	currentComponent="tNormalize_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0");
					}
				
		int tos_count_tNormalize_1 = 0;
		

	int lastNoEmptyIndex_tNormalize_1 = 0;
    int nb_line_tNormalize_1 = 0;
        String tmp_tNormalize_1 = null;
        StringBuilder currentRecord_tNormalize_1 = null;
        String [] normalizeRecord_tNormalize_1 = null;
        java.util.Set<String> recordSet_tNormalize_1 = new java.util.HashSet<String>();
        
				if ( ((String)",").length() == 0 ){
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				

 



/**
 * [tNormalize_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row81");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row80");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */context.strLoadingStrategy/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('\"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('\"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row80 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row80 = new row80Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row80.Owner = null;
					
							row80.TableName = null;
					
							row80.SCD2__By_Adam = null;
					
							row80.NR_OF_COLUMN_ON_PREPROD = null;
					
							row80.PrimaryKey_Column = null;
					
							row80.Primary_Key = null;
					
							row80.Data_Availabilty_in_Database_UAT_ = null;
					
							row80.Incremental_Identifie = null;
					
							row80.Extraction_Mechanism = null;
					
							row80.Insert_Mechanism = null;
					
							row80.HistoricalData_Identification = null;
					
							row80.Merge_Key = null;
					
							row80.Comments = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.Owner = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.Owner = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.TableName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.TableName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.SCD2__By_Adam = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.SCD2__By_Adam = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.NR_OF_COLUMN_ON_PREPROD = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.NR_OF_COLUMN_ON_PREPROD = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.PrimaryKey_Column = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.PrimaryKey_Column = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.Primary_Key = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.Primary_Key = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.Data_Availabilty_in_Database_UAT_ = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.Data_Availabilty_in_Database_UAT_ = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.Incremental_Identifie = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.Incremental_Identifie = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.Extraction_Mechanism = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.Extraction_Mechanism = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.Insert_Mechanism = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.Insert_Mechanism = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.HistoricalData_Identification = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.HistoricalData_Identification = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.Merge_Key = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.Merge_Key = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row80.Comments = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row80.Comments = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row80 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row80"
if(row80 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row80");
					}
					

          row81 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("||");
            ope_tFilterRow_1.matches((row80.PrimaryKey_Column == null? false : row80.PrimaryKey_Column.compareTo("") != 0)
                           , "PrimaryKey_Column.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row81 == null){ 
                row81 = new row81Struct();
              }
               row81.Owner = row80.Owner;
               row81.TableName = row80.TableName;
               row81.SCD2__By_Adam = row80.SCD2__By_Adam;
               row81.NR_OF_COLUMN_ON_PREPROD = row80.NR_OF_COLUMN_ON_PREPROD;
               row81.PrimaryKey_Column = row80.PrimaryKey_Column;
               row81.Primary_Key = row80.Primary_Key;
               row81.Data_Availabilty_in_Database_UAT_ = row80.Data_Availabilty_in_Database_UAT_;
               row81.Incremental_Identifie = row80.Incremental_Identifie;
               row81.Extraction_Mechanism = row80.Extraction_Mechanism;
               row81.Insert_Mechanism = row80.Insert_Mechanism;
               row81.HistoricalData_Identification = row80.HistoricalData_Identification;
               row81.Merge_Key = row80.Merge_Key;
               row81.Comments = row80.Comments;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row81"
if(row81 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row81");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0 = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0_tmp.OWNER = "OWNER";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0_tmp.TARGET_TABLE_NAME = row81.TableName ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0_tmp.PRIMARY_KEY_COLUMN = StringHandling.UPCASE(row81.PrimaryKey_Column).replaceAll(" ", "") ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0_tmp.PRIMARY_KEY = "PK";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0_tmp.MERGE_KEY = "MK";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0 != null) { 



	
	/**
	 * [tNormalize_1 main ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0");
					}
					

            normalizeRecord_tNormalize_1 = new String[1];
            if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0.PRIMARY_KEY_COLUMN != null) {
				if("".equals(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0.PRIMARY_KEY_COLUMN)){
		        	normalizeRecord_tNormalize_1[0] = "";
		        }else{
	                
	                		normalizeRecord_tNormalize_1 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0.PRIMARY_KEY_COLUMN.split(",",-1);
	                        
                }           
            }
             		lastNoEmptyIndex_tNormalize_1=normalizeRecord_tNormalize_1.length;
	             	
            	
            	for(int i_tNormalize_1 = 0 ; i_tNormalize_1 < lastNoEmptyIndex_tNormalize_1 ; i_tNormalize_1++) {
		  			
		            	if(normalizeRecord_tNormalize_1[i_tNormalize_1]!=null){
		            		normalizeRecord_tNormalize_1[i_tNormalize_1]=normalizeRecord_tNormalize_1[i_tNormalize_1].trim();
		            	}
		            
	                currentRecord_tNormalize_1 = new StringBuilder();
	                nb_line_tNormalize_1++;               
	                
	                        	row82.OWNER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0.OWNER;
	                        
	                        	row82.TARGET_TABLE_NAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0.TARGET_TABLE_NAME;
	                        
	                        	row82.PRIMARY_KEY_COLUMN = normalizeRecord_tNormalize_1[i_tNormalize_1];
		                    
	                        	row82.PRIMARY_KEY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0.PRIMARY_KEY;
	                        
	                        	row82.MERGE_KEY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0.MERGE_KEY;
	                        

 


	tos_count_tNormalize_1++;

/**
 * [tNormalize_1 main ] stop
 */
	
	/**
	 * [tNormalize_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

 



/**
 * [tNormalize_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row82");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.Primary_key_modified = (Relational.ISNULL(row82.PRIMARY_KEY_COLUMN)||row82.PRIMARY_KEY_COLUMN.equals(""))
?row82.PRIMARY_KEY_COLUMN:("SRC."+row82.PRIMARY_KEY_COLUMN+"="+"TGT."+row82.PRIMARY_KEY_COLUMN) ;
Var.ID_sq = Numeric.sequence(row82.TARGET_TABLE_NAME,1,1).toString() ;
Var.Null = Numeric.sequence("SV"+row82.TARGET_TABLE_NAME,1,1).toString() ;
Var.Merge = Numeric.sequence("SD"+row82.TARGET_TABLE_NAME,1,1).toString() ;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0 = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0_tmp.TARGET_TABLE_NAME = row82.TARGET_TABLE_NAME ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0_tmp.PRIMARY_KEY_COLUMN = row82.PRIMARY_KEY_COLUMN ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0_tmp.JOIN_CONDITION = Var.Primary_key_modified ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0_tmp.ID = (Relational.ISNULL(row82.PRIMARY_KEY_COLUMN)||row82.PRIMARY_KEY_COLUMN.equals(""))
?"NULL AS JOINKEY1":row82.PRIMARY_KEY_COLUMN+" AS JOINKEY"+Var.ID_sq ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0_tmp.MERGE_KEY = (Relational.ISNULL(row82.PRIMARY_KEY_COLUMN)||row82.PRIMARY_KEY_COLUMN.equals(""))
?"SRC_T.JOINKEY1=TGT_T.NULL":"SRC_T.JOINKEY"+Var.Merge+"="+"TGT_T."+row82.PRIMARY_KEY_COLUMN ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0_tmp.NULL_ID = (Relational.ISNULL(row82.PRIMARY_KEY_COLUMN)||row82.PRIMARY_KEY_COLUMN.equals(""))
?"NULL AS JOINKEY1":"NULL AS JOINKEY"+Var.Null ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0 != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0");
					}
					
	
operation_finder_tAggregateRow_1.TARGET_TABLE_NAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0.TARGET_TABLE_NAME;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.TARGET_TABLE_NAME = operation_finder_tAggregateRow_1.TARGET_TABLE_NAME;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				if(operation_result_tAggregateRow_1.JOIN_CONDITION_list.length() > 0) {
					operation_result_tAggregateRow_1.JOIN_CONDITION_list.append(",");
				} 
				else if(operation_result_tAggregateRow_1.JOIN_CONDITION_list_firstEmpty){
					operation_result_tAggregateRow_1.JOIN_CONDITION_list.append(",");
				}
					if(operation_result_tAggregateRow_1.JOIN_CONDITION_list != null) {
						if(operation_result_tAggregateRow_1.JOIN_CONDITION_list_firstEmpty==false && ("").equals(String.valueOf(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0.JOIN_CONDITION))){
							operation_result_tAggregateRow_1.JOIN_CONDITION_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_1.JOIN_CONDITION_list = operation_result_tAggregateRow_1.JOIN_CONDITION_list.append(String.valueOf(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0.JOIN_CONDITION));
					}
				
				if(operation_result_tAggregateRow_1.ID_list.length() > 0) {
					operation_result_tAggregateRow_1.ID_list.append(",");
				} 
				else if(operation_result_tAggregateRow_1.ID_list_firstEmpty){
					operation_result_tAggregateRow_1.ID_list.append(",");
				}
					if(operation_result_tAggregateRow_1.ID_list != null) {
						if(operation_result_tAggregateRow_1.ID_list_firstEmpty==false && ("").equals(String.valueOf(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0.ID))){
							operation_result_tAggregateRow_1.ID_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_1.ID_list = operation_result_tAggregateRow_1.ID_list.append(String.valueOf(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0.ID));
					}
				
				if(operation_result_tAggregateRow_1.MERGE_KEY_list.length() > 0) {
					operation_result_tAggregateRow_1.MERGE_KEY_list.append(",");
				} 
				else if(operation_result_tAggregateRow_1.MERGE_KEY_list_firstEmpty){
					operation_result_tAggregateRow_1.MERGE_KEY_list.append(",");
				}
					if(operation_result_tAggregateRow_1.MERGE_KEY_list != null) {
						if(operation_result_tAggregateRow_1.MERGE_KEY_list_firstEmpty==false && ("").equals(String.valueOf(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0.MERGE_KEY))){
							operation_result_tAggregateRow_1.MERGE_KEY_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_1.MERGE_KEY_list = operation_result_tAggregateRow_1.MERGE_KEY_list.append(String.valueOf(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0.MERGE_KEY));
					}
				
				if(operation_result_tAggregateRow_1.NULL_ID_list.length() > 0) {
					operation_result_tAggregateRow_1.NULL_ID_list.append(",");
				} 
				else if(operation_result_tAggregateRow_1.NULL_ID_list_firstEmpty){
					operation_result_tAggregateRow_1.NULL_ID_list.append(",");
				}
					if(operation_result_tAggregateRow_1.NULL_ID_list != null) {
						if(operation_result_tAggregateRow_1.NULL_ID_list_firstEmpty==false && ("").equals(String.valueOf(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0.NULL_ID))){
							operation_result_tAggregateRow_1.NULL_ID_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_1.NULL_ID_list = operation_result_tAggregateRow_1.NULL_ID_list.append(String.valueOf(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0.NULL_ID));
					}
				
				operation_result_tAggregateRow_1.COUNT_clmCount++;
				operation_result_tAggregateRow_1.count++;
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tNormalize_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

 



/**
 * [tNormalize_1 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row81"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "row80"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row80");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row81");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tNormalize_1 end ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

    globalMap.put("tNormalize_1_NB_LINE", nb_line_tNormalize_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout2_0");
			  	}
			  	
 

ok_Hash.put("tNormalize_1", true);
end_Hash.put("tNormalize_1", System.currentTimeMillis());




/**
 * [tNormalize_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row82");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout3_0");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */



	
	/**
	 * [tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0", false);
		start_Hash.put("tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0");
					}
				
		int tos_count_tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = 0;
		

			   		// connection name:copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0
			   		// source node:tMap_3 - inputs:(row84) outputs:(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0,copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0) | target node:tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 - inputs:(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0) outputs:()
			   		// linked node: tMap_4 - inputs:(row83,copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0) outputs:(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout5_0)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct> tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct>getLookup(matchingModeEnum_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0);
	   						   
		   	   	   globalMap.put("tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0", tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row84");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	String JOIN_CONDITION;
	String MERGE_CONDITION;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row84.TARGET_TABLE_NAME = aggregated_row_tAggregateRow_1.TARGET_TABLE_NAME;
            				    
    								row84.JOIN_CONDITION = aggregated_row_tAggregateRow_1.JOIN_CONDITION_list.toString();
	    						
    								row84.ID = aggregated_row_tAggregateRow_1.ID_list.toString();
	    						
    								row84.MERGE_KEY = aggregated_row_tAggregateRow_1.MERGE_KEY_list.toString();
	    						
    								row84.NULL_ID = aggregated_row_tAggregateRow_1.NULL_ID_list.toString();
	    						row84.COUNT = (int) aggregated_row_tAggregateRow_1.count;
	                                	row84.COUNT = (int) aggregated_row_tAggregateRow_1.COUNT_clmCount;
	                                	

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row84");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.JOIN_CONDITION = row84.JOIN_CONDITION.replace(","," AND ") ;
Var.MERGE_CONDITION = row84.MERGE_KEY.replace(","," AND ")  ;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_tmp.TARGET_TABLE_NAME = row84.TARGET_TABLE_NAME ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_tmp.NULL_ID = row84.NULL_ID ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_tmp.MERGE_CONDITION = Var.MERGE_CONDITION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_tmp.ID = row84.ID ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_tmp.JOIN_CONDITION = Var.JOIN_CONDITION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_tmp.COUNT = row84.COUNT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 != null) { 



	
	/**
	 * [tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0");
					}
					


			   
			   

					copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_HashRow = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0Struct();
		   	   	   
				
				copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_HashRow.TARGET_TABLE_NAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.TARGET_TABLE_NAME;
				
				copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_HashRow.NULL_ID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.NULL_ID;
				
				copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_HashRow.MERGE_CONDITION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.MERGE_CONDITION;
				
				copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_HashRow.ID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.ID;
				
				copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_HashRow.JOIN_CONDITION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.JOIN_CONDITION;
				
				copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_HashRow.COUNT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.COUNT;
				
			tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.put(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0_HashRow);
			
            




 


	tos_count_tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0++;

/**
 * [tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 main ] stop
 */
	
	/**
	 * [tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0";

	

 



/**
 * [tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0";

	

 



/**
 * [tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row84");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0";

	

tHash_Lookup_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0", true);
end_Hash.put("tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0", System.currentTimeMillis());




/**
 * [tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 end ] stop
 */
























				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tNormalize_1 finally ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

 



/**
 * [tNormalize_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0";

	

 



/**
 * [tAdvancedHash_copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfout4_0 finally ] stop
 */
























				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final fin_SCD2 fin_SCD2Class = new fin_SCD2();

        int exitCode = fin_SCD2Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = fin_SCD2.class.getClassLoader().getResourceAsStream("leap/fin_scd2_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = fin_SCD2.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("strLoadingStrategy", "id_String");
                            context.strLoadingStrategy=(String) context.getProperty("strLoadingStrategy");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("strLoadingStrategy")) {
                context.strLoadingStrategy = (String) parentContextMap.get("strLoadingStrategy");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : fin_SCD2");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     202516 characters generated by Talend Open Studio for Big Data 
 *     on the 22 June, 2021 5:57:48 PM IST
 ************************************************************************************************/